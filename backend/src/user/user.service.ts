import {
  ForbiddenException,
  Inject,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { CreateUserDto } from './dto/create-user.dto';
import { QueryUserDto } from './dto/query-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { User } from './user.entity';
const bannedWords = [
  'test',
  'item',
  'user',
  'market',
  'nigger',
  'about',
  'abuse',
  'access',
  'account',
  'accounts',
  'activate',
  'ad',
  'add',
  'address',
  'adm',
  'admin',
  'administration',
  'administrator',
  'ads',
  'adult',
  'advertising',
  'affiliate',
  'affiliates',
  'ajax',
  'analytics',
  'android',
  'anon',
  'anonymous',
  'api',
  'app',
  'apps',
  'archive',
  'atom',
  'auth',
  'authentication',
  'autoconfig',
  'avatar',
  'backup',
  'bad',
  'banner',
  'banners',
  'best',
  'beta',
  'billing',
  'bin',
  'blackberry',
  'blog',
  'blogs',
  'board',
  'bot',
  'bots',
  'broadcasthost',
  'business',
  'cache',
  'calendar',
  'campaign',
  'career',
  'careers',
  'cart',
  'cdn',
  'cgi',
  'chat',
  'chef',
  'client',
  'clients',
  'code',
  'codes',
  'commercial',
  'community',
  'compare',
  'config',
  'connect',
  'contact',
  'contest',
  'cookie',
  'copyright',
  'corporate',
  'create',
  'crossdomain',
  'css',
  'customer',
  'dash',
  'dashboard',
  'data',
  'database',
  'db',
  'delete',
  'demo',
  'design',
  'designer',
  'dev',
  'devel',
  'developer',
  'developers',
  'development',
  'dir',
  'directory',
  'dmca',
  'doc',
  'docs',
  'documentation',
  'domain',
  'domainadmin',
  'domainadministrator',
  'download',
  'downloads',
  'ecommerce',
  'edit',
  'editor',
  'email',
  'embed',
  'enterprise',
  'error',
  'errors',
  'events',
  'example',
  'facebook',
  'faq',
  'faqs',
  'favorite',
  'favorites',
  'favourite',
  'favourites',
  'features',
  'feed',
  'feedback',
  'feeds',
  'file',
  'files',
  'follow',
  'font',
  'fonts',
  'forum',
  'forums',
  'free',
  'ftp',
  'gadget',
  'gadgets',
  'games',
  'gift',
  'git',
  'good',
  'google',
  'group',
  'groups',
  'guest',
  'guests',
  'help',
  'helpcenter',
  'home',
  'homepage',
  'host',
  'hosting',
  'hostmaster',
  'hostname',
  'html',
  'http',
  'httpd',
  'https',
  'image',
  'images',
  'imap',
  'img',
  'index',
  'indice',
  'info',
  'information',
  'intranet',
  'invite',
  'ipad',
  'iphone',
  'irc',
  'is',
  'isatap',
  'it',
  'java',
  'javascript',
  'job',
  'jobs',
  'js',
  'json',
  'knowledgebase',
  'legal',
  'license',
  'list',
  'lists',
  'localdomain',
  'localhost',
  'log',
  'login',
  'logout',
  'logs',
  'mail',
  'mailerdaemon',
  'manager',
  'manifesto',
  'marketing',
  'master',
  'me',
  'media',
  'message',
  'messages',
  'messenger',
  'mine',
  'mis',
  'mob',
  'mobile',
  'msg',
  'must',
  'mx',
  'my',
  'mysql',
  'name',
  'named',
  'net',
  'network',
  'new',
  'newest',
  'news',
  'newsletter',
  'nobody',
  'noc',
  'nogroup',
  'noreply',
  'notes',
  'ns',
  'ns1',
  'ns2',
  'ns3',
  'ns4',
  'ns5',
  'ns6',
  'ns7',
  'ns8',
  'ns9',
  'oembed',
  'old',
  'oldest',
  'online',
  'operator',
  'order',
  'orders',
  'owner',
  'page',
  'pager',
  'pages',
  'panel',
  'password',
  'perl',
  'photo',
  'photos',
  'php',
  'pic',
  'pics',
  'plan',
  'plans',
  'plugin',
  'plugins',
  'pop',
  'pop3',
  'post',
  'postfix',
  'postmaster',
  'posts',
  'press',
  'pricing',
  'privacy',
  'profile',
  'project',
  'projects',
  'promo',
  'pub',
  'public',
  'python',
  'random',
  'recipe',
  'recipes',
  'register',
  'registration',
  'remove',
  'request',
  'reset',
  'robots',
  'root',
  'rss',
  'ruby',
  'sale',
  'sales',
  'sample',
  'samples',
  'save',
  'script',
  'scripts',
  'search',
  'secure',
  'security',
  'send',
  'service',
  'services',
  'setting',
  'settings',
  'setup',
  'shop',
  'shopping',
  'signin',
  'signout',
  'signup',
  'site',
  'sitemap',
  'sites',
  'smtp',
  'sql',
  'src',
  'ssh',
  'ssl',
  'ssladmin',
  'ssladministrator',
  'sslwebmaster',
  'stage',
  'staging',
  'start',
  'stat',
  'static',
  'stats',
  'status',
  'store',
  'stores',
  'subdomain',
  'subscribe',
  'support',
  'surprise',
  'svn',
  'sys',
  'sysadmin',
  'sysop',
  'system',
  'tablet',
  'tablets',
  'talk',
  'task',
  'tasks',
  'tech',
  'telnet',
  'terms',
  'test',
  'test1',
  'test2',
  'test3',
  'tests',
  'theme',
  'themes',
  'tmp',
  'todo',
  'tools',
  'top',
  'trust',
  'tutorial',
  'tutorials',
  'tv',
  'twitter',
  'twittr',
  'unsubscribe',
  'update',
  'upload',
  'url',
  'usage',
  'usenet',
  'user',
  'username',
  'users',
  'uucp',
  'video',
  'videos',
  'visitor',
  'web',
  'weblog',
  'webmail',
  'webmaster',
  'website',
  'websites',
  'welcome',
  'wiki',
  'win',
  'wpad',
  'ww',
  'wws',
  'www',
  'www1',
  'www2',
  'www3',
  'www4',
  'www5',
  'www6',
  'www7',
  'wwws',
  'wwww',
  'xml',
  'xpg',
  'xxx',
  'yahoo',
  'you',
  'yourdomain',
  'yourname',
  'yoursite',
  'yourusername',
  'bid',
  'bids',
  'creator',
];
const regeXnickname = new RegExp(/^[a-zA-Z0-9]+$/);

@Injectable()
export class UserService {
  constructor(
    @Inject('USERS_REPOSITORY') private usersRepository: typeof User,
  ) {}

  create(createUserDto: CreateUserDto) {
    return 'This action adds a new user';
  }

  findAll() {
    return `This action returns all user`;
  }

  async findByPk(id: number) {
    return await this.usersRepository.findByPk(id, {
      attributes: {
        exclude: ['password', 'discord', 'discordId'],
      },
    });
  }

  async findOne(user: QueryUserDto): Promise<User> | null {
    return await this.usersRepository.findOne({
      attributes: {
        exclude: ['discord', 'password', 'discordId'],
      },
      where: { ...user, active: true },
    });
  }

  async validateUser(user: QueryUserDto): Promise<User> | null {
    return await this.usersRepository.findOne({
      attributes: {
        exclude: ['discord'],
      },
      where: { ...user, active: true },
    });
  }

  async findByNickname(nickname: string) {
    return await this.usersRepository.findOne({
      where: { nickname, active: true },
      attributes: {
        exclude: ['password', 'discord', 'discordId'],
      },
    });
  }

  async findByHash(hash: string) {
    return await this.usersRepository.findOne({
      where: { hash, active: true },
      attributes: {
        exclude: ['password', 'discord', 'discordId'],
      },
    });
  }

  async update(updateUserDto: UpdateUserDto) {
    if (!regeXnickname.test(updateUserDto.nickname))
      throw new ForbiddenException(
        'Allowed Latin letters and numbers in nickname',
      );

    const user = await this.usersRepository.findOne({
      where: {
        hash: updateUserDto.hash,
      },
    });

    if (!user)
      throw new NotFoundException(
        'This hash already not valid, please try signUp via discord',
      );

    // if (user.nickname === updateUserDto.nickname.toLowerCase().trim())
    //   throw new ForbiddenException('This login already exist')

    user.hash = '';
    user.nickname = updateUserDto.nickname.toLowerCase().trim();
    user.password = updateUserDto.password;
    try {
      await user.save();
    } catch (error) {
      throw new NotFoundException('This nickname already exist');
    }
    return { message: 'user created' };
  }

  remove(id: number) {
    return `This action removes a #${id} user`;
  }
}
